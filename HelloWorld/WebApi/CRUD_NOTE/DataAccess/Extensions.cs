using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace DataAccess;

public static class Extensions
{
    // Этот метод расширения AddDataAccess добавляет необходимые сервисы для работы с базой данных в приложении.
    public static IServiceCollection AddDataAccess(this IServiceCollection services, IConfiguration configuration)
    {
        // AddScoped - это метод расширения, который добавляет новый тип в коллекцию IServiceCollection.
        // Он используется для регистрации типов, которые должны быть созданы каждый раз, когда они требуется
        // из контейнера DI (Dependency Injection).
        
        // Жизненный цикл: Созданные экземпляры будут жить только во время текущего HTTP-запроса. После завершения запроса,
        // эти экземпляры будут уничтожены.
        // Кэширование: Если приложение получает несколько запросов, которые требуют одного и того же типа, будет использоваться один и тот же экземпляр.
        // Переиспользование: Экземпляры создаются только один раз за жизненный цикл приложения и затем переиспользуются.
        // Порядок создания: AddScoped гарантирует, что все зависимости будут созданы перед тем, как создать сам объект.
        
        // Преимущества AddScoped
        // Оптимизация производительности: Уменьшает количество создаваемых объектов, так как они переиспользуются.
        // Предсказуемое поведение: Обеспечивает предсказуемое поведение для объектов, которые живут только во время HTTP-запроса.
        // Изоляция: Каждый HTTP-запрос получает свой экземпляр, что полезно для обработки транзакций или состояния, специфичных для запроса.
        
        // AddTransient: Создает новый экземпляр каждого раза, когда объект запрашивается.
        // AddSingleton: Создает один экземпляр для всего жизненного цикла приложения.
        // AddScoped: Создает новый экземпляр для каждого HTTP-запроса.
        services.AddScoped<INoteRepository, NoteRepository>();
        
        // Здесь мы добавляем сервис AppContext в контейнер зависимостей.
        // AppContext является контекстом базы данных, который используется для взаимодействия с базой данных.
        services.AddDbContext<AppContext>(option  =>
        {
            // Здесь мы настраиваем параметры подключения к базе данных.
            // В данном случае, мы используем PostgreSQL базу данных
            option.UseNpgsql(configuration.GetConnectionString("DbConnection")); 
        });

        return services;
    }
}